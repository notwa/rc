# if `setopt NO_RCS`, only /etc/zshenv is run, everything after is skipped.
# if `setopt NO_GLOBAL_RCS`, /etc files are skipped but ZDOTDIR still runs.
# 1. zshenv   -- /etc/zshenv   --> ${ZDOTDIR-$HOME}/.zshenv   (always runs)
# 2. zprofile -- /etc/zprofile --> ${ZDOTDIR-$HOME}/.zprofile (login shell)
# 3. zshrc    -- /etc/zshrc    --> ${ZDOTDIR-$HOME}/.zshrc    (interactive)
# 4. zlogin   -- /etc/zlogin   --> ${ZDOTDIR-$HOME}/.zlogin   (login shell)
# 5. zlogout  -- /etc/zlogout  <-- ${ZDOTDIR-$HOME}/.zlogout  (login shell)
# note that /etc/zlogout is run last, and may be skipped by running `exec`.

HISTFILE=~/.histfile
HISTSIZE=99999
SAVEHIST=99999
TIMEFMT=$'\e[93m%*U/%*E cpu/real (%P), %MM mem:\e[36m %J\e[0m'
DIRSTACKSIZE=24

# could affect scripts:
setopt auto_cd                  # exec a dir to cd
setopt auto_pushd               # cd acts as pushd
setopt chase_links              # cd into link resolves link
setopt path_dirs                # Perform path search even on command names with slashes.

# strictly interactive:
setopt always_to_end            # move cursor to end of word during completion
setopt append_history share_history # share history across ongoing sessions
setopt auto_list                # Automatically list choices on ambiguous completion.
setopt auto_menu                # Show completion menu on a successive tab press.
setopt auto_param_slash         # add a trailing slash to directory completions
setopt check_jobs notify        # automatic job reporting
setopt complete_aliases         # allow original command completion within alias
setopt complete_in_word         # enable tab completion from any characters in a word
setopt hist_expire_dups_first   # sharing/appending will result in dups
setopt hist_ignore_dups         # don't push lines identical to the previous
setopt hist_ignore_space        # don't push lines beginning with spaces
setopt hist_reduce_blanks       # trim superfluous spaces
setopt hist_save_no_dups
setopt hist_verify
setopt interactive_comments     # allow #-comments in interactive shells
setopt menu_complete            # autoselect the first completion entry
setopt no_beep                  # be quiet
setopt no_match                 # error on bad tab-complete
setopt prompt_cr prompt_sp      # prevent truncated output from ruining shell prompts
unsetopt flow_control           # Disable start/stop characters in shell editor.
unsetopt bang_hist              # this does nothing but cause me grief (disables !s)

# before we (potentially) launch tmux, disable RTL in this terminal.
if [ "$TERM_PROGRAM" = mintty ] && ! [[ "$TERM_PROGRAM_VERSION" < 2.7.6 ]]; then
    if   [ "${TERM#tmux}"   != "$TERM" ]; then  printf '\033Ptmux;\033\033[?77096h\033\\'
    elif [ "${TERM#screen}" != "$TERM" ]; then  printf '\033P\033[?77096h\033\\'
    else                                        printf '\033[?77096h'
    fi
fi

autotmux() {
    if [ "$SHLVL" -le 1 ] \
    && [ "${(L)HOST}" != spectre ] \
    && [ "${TERM#screen}" = "$TERM" ] \
    && [ "${TERM#tmux}" = "$TERM" ] \
    && [ -z "$ALACRITTY_LOG" ] \
    && (( $+commands[tmux] ))
    then
        # create a new session called "what" or attach if it already exists
        local env=(LANG="en_US.UTF-8" TZ=":/etc/localtime")
        local cmd=(tmux new -A -s what)
        [ "${TTY#/dev/cons}" = "$TTY" ] || cmd=(script -qfec "$cmd" /dev/null)
        env $env $cmd && exit
        printf '\e[91m\ntmux died (%i), continuing...\n\e[0m\n' $?
    fi
}

autoload -U zmv
autoload -U zrecompile
autoload -Uz zcalc
autoload edit-command-line
autoload history-search-end
zmodload zsh/mathfunc

dummy() : ### @- return 0, ignoring arguments.
zle -N dummy

dirprev() {
    # rotate and change to the previous directory in the directory stack
    # without consuming the prompt.
    pushd -q +1
    zle reset-prompt
    precmd
}
dirnext() {
    # rotate and change to the next directory in the directory stack
    # without consuming the prompt.
    pushd -q -0
    zle reset-prompt
    precmd
}
dirup() {
    # change to the parent directory of the current working directory
    # without consuming the prompt.
    cd ..
    zle reset-prompt
    precmd
}
dirview() {
    # use a fuzzy finder to select a recent directory in the directory stack
    # and change to it without consuming the prompt.
    local fuzzy="$(have fzy || print)"
    print
    if [ -n "$fuzzy" ]; then
        local d="$(dirs -pl | awk '!seen[$0]++' | "$fuzzy")"
        cd "$d"
    else
        # TODO: print under prompt if possible,
        # truncate and columnize
        dirs -v
    fi
    zle reset-prompt
    precmd
}

zle -N dirprev
zle -N dirnext
zle -N dirup
zle -N dirview

join-lines() {
    BUFFER="${BUFFER//$'\n'/ }"
    CURSOR="${#BUFFER}"
}
zle -N join-lines

bindkey -e # emacs-style keybinds

# oh thank god: http://blog.samsonis.me/2013/12/bash-like-history-search-functionality-for-zsh/
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^[[A' history-beginning-search-backward-end # up
bindkey '^[[B' history-beginning-search-forward-end # down
bindkey '^[OA' history-beginning-search-backward-end # up
bindkey '^[OB' history-beginning-search-forward-end # down

bindkey '^[[1;5D' emacs-backward-word # ctrl+left
bindkey '^[[1;5C' emacs-forward-word # ctrl+right
bindkey '^[[1;3D' dirprev # alt+left
bindkey '^[[1;3C' dirnext # alt+right
bindkey '^[[1;3A' dirup # alt+up
bindkey '^[[1;3B' dirview # alt+down
bindkey -s '^[s' '^Asudo ^E' # alt+s
bindkey '^[j' join-lines # alt+j
bindkey '^[[3~' delete-char # del
bindkey '^[[1~' beginning-of-line # home
bindkey '^[[4~' end-of-line # end
bindkey '^[[Z' reverse-menu-complete # shift+tab

# prevent erroneous inputs from inputting anything.
bindkey '^[[3;5~' dummy # ctrl+del
bindkey '^[[5;5~' dummy # ctrl+PgUp
bindkey '^[[6;5~' dummy # ctrl+PgDn
bindkey '^[[5;6~' dummy # ctrl+shift+PgUp
bindkey '^[[6;6~' dummy # ctrl+shift+PgDn
bindkey '^[[3;2~' dummy # shift+del
bindkey '^[[1;2F' dummy # shift+end, do nothing, already at bottom (tmux)
bindkey '^[[6;2~' dummy # shift+PgDn, do nothing, already at bottom (tmux)
bindkey '^[[2;3~' dummy # alt+ins
bindkey '^[[3;3~' dummy # alt+del
bindkey '^[[5;3~' dummy # alt+PgUp
bindkey '^[[6;3~' dummy # alt+PgDn
bindkey '^[[2;4~' dummy # alt+shift+ins
bindkey '^[[3;4~' dummy # alt+shift+del
bindkey '^[[1;4H' dummy # alt+shift+home
bindkey '^[[1;4F' dummy # alt+shift+end
bindkey '^[[5;4~' dummy # alt+shift+PgUp
bindkey '^[[6;4~' dummy # alt+shift+PgDn
bindkey '^[[1;6q' dummy # ctrl+shift+1
bindkey '^[[1;6s' dummy # ctrl+shift+3
bindkey '^[[1;6t' dummy # ctrl+shift+4
bindkey '^[[1;6u' dummy # ctrl+shift+5
bindkey '^[[1;6w' dummy # ctrl+shift+7
bindkey '^[[1;6x' dummy # ctrl+shift+8
bindkey '^[[1;6y' dummy # ctrl+shift+9
bindkey '^[[1;6l' dummy # ctrl+shift+comma
bindkey '^[[1;6n' dummy # ctrl+shift+period
bindkey '^[[1;7A' dummy # ctrl+alt+arrow
bindkey '^[[1;7B' dummy # ctrl+alt+arrow
bindkey '^[[1;7C' dummy # ctrl+alt+arrow
bindkey '^[[1;7D' dummy # ctrl+alt+arrow
bindkey '^[[1;8A' dummy # ctrl+alt+shift+arrow
bindkey '^[[1;8B' dummy # ctrl+alt+shift+arrow
bindkey '^[[1;8C' dummy # ctrl+alt+shift+arrow
bindkey '^[[1;8D' dummy # ctrl+alt+shift+arrow

zle -N edit-command-line # new widget of the same function name
bindkey '^Xe' edit-command-line # ctrl+x -> e

# these drive letters were once to counteract my overzealous zsh completions.
hash -d c="/c"
hash -d d="/d"
[ -d /media/chibi ] && hash -d e="/media/chibi" || hash -d e="/e"
hash -d s="/s"

if [ -n "$MSYSTEM" ]; then
    hash -d cyg=~c/cygwin/home/$USER
    hash -d msys=~c/msys64/home/$USER
    hash -d win=~c/Users/$USER
    hash -d py=~win/Dropbox/py
else
    hash -d py=~/Dropbox/py
fi

conflagrate() {
    # initialize prompts.
    # zsh adds a % symbol to newline-less output, so my bash prompt is overkill
    # NOTE: i've started hardcoding escapes instead of relying on zsh
    #       because detecting terminal features is too troublesome.
    # https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Functions-using-CSI-_-ordered-by-the-final-character_s_
    local chset=$'\033\050B\017' # set G0 to USASCII charset and "shift-in" to it
    local s=$'\033\133' e=m # CSI and SGR
    local reset=$s$e curse=$s$'?25h' # reset color, show cursor (DECTCEM)

    local t="${TERM%%-*}"
    precmd() {}
    if [ "$t" = xterm ] || [ "$t" = screen ] || [ "$t" = tmux ]; then
        # set window title
        if [ "$t" = tmux ] # don't include host, tmux prepends it
        then precmd() { print -Pn "\e]2;%~\a" }
        else precmd() { print -Pn "\e]2;%M: %~\a" }
        fi
    elif [ "$t" = alacritty ]; then
        # Alacritty-v0.15.0-portable.exe -t "MinGW x64" -e "usr/bin/env" PATH="/usr/local/sbin:/usr/local/bin:/usr/bin" MSYSTEM=MINGW64 TERM=alacritty shelly
        chset= # displays as U+263C for some reason
    else
        # act dumb
        PROMPT="%# "
        return
    fi

    PROMPT="%{$chset$curse$reset$s%(?.${okay:-42}.${fail:-41});${fg:-97}$e%}%#%{$reset%} "
}

unalias -a # prevents syntax errors when defining functions clobbering aliases

. ~/.shrc

alias -g OMFG="1>/dev/null" ### @ OMFG - silence stdout.
alias -g STFU="2>/dev/null" ### @ STFU - silence stderr.
alias -g SWAP="3>&1 1>&2 2>&3" ### @ SWAP - swap stdout and stderr. uses fd 3 as an intermediary.
alias -g WHOA='${whoa[@]}' #-- @ WHOA - expand to several C/C++ flags to ease development.
alias -g WHEE='${whee[@]}' #-- @ WHEE - WHOA but for C++ (specifically g++) only.
alias -g WELP='${welp[@]}' #-- @ WELP - expand to C++ flags to enable a C++-as-C facade.

reload() { ### @-
    ### reload zsh by wiping temp files, recompiling rc files,
    ### and replacing the current process with a new zsh process.
    # initctl has a "reload" symlink, but i'm already too used to typing this.
    # to remedy this, when args are passed, invoke initctl instead.
    if [ $# -gt 0 ]; then
        "${commands[reload]:?initctl is missing}" "$@"
        return # preserves $?
    fi

    if [ -n "$HOME" ] && cd -- "$HOME"; then
        # this doesn't seem to help with _vim_files errors, eh.
        # you wanna rm .zcompdump first, then exit. that's why!
        [ -f .zshrc ] && zrecompile -p .zshrc
        rm -f .zcompdump .zshrc.zwc.old .zcompdump.zwc.old \
              .prezto-compinit.zwc .prezto-compinit.zwc.old
        cd -- "$OLDPWD"
    fi
    exec zsh # reload shell, inheriting environment
}

function {
    local x=
    # deprecated `for` syntax; who cares?
    for x in ack cd cp ebuild gcc gist grep ln man mkdir mv rm
        alias $x="nocorrect ${aliases[$x][@]:-$x}"
    for x in ai arith curl fc find ftp hex history let locate \
             rsync scp sftp tw twitch wget yt yt-dlp ytdl ytg
        alias $x="noglob ${aliases[$x][@]:-$x}"
}

#zmodload zsh/complist               # need all this
#autoload -Uz compinit && compinit   # just for compdef
#compdef wat=which

! [ -e ~/.lol ] || . ~/.lol
