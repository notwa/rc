#!/usr/bin/env bash
# compat: -ash +bash -dash -hush -ksh -mksh -oksh +osh -posh -yash +zsh

__asn_rev() { # byte-swap
    REPLY=
    local ip="${1:?missing argument}" byte=
    while [ -n "$ip" ]; do
        byte="${ip%%.*}" ip="${ip#"$byte"}" ip="${ip#.}"
        REPLY="$byte.$REPLY"
    done
    REPLY="${REPLY%.}"
}

__asn_txt() {
    REPLY="$(exec dig +short +timeout=1 +tries=1 "$@" TXT)"
    case "$REPLY" in
    (";;"*) return 2;;
    ('"'*'"') true;;
    (*) return 1;;
    esac
    REPLY="${REPLY#\"}" REPLY="${REPLY%\"}"
}

__asn_txt_bad() {
    REPLY="$(nslookup -type=TXT "$@" 2>/dev/null)"
    [ "${REPLY#Server:}" != "$REPLY" ] || return 2
    [ "${REPLY#*\"}" != "$REPLY" ] && REPLY="${REPLY#*\"}" || return 1
    [ "${REPLY%%\"*}" != "$REPLY" ] && REPLY="${REPLY%%\"*}" || return 1
    [ -n "$REPLY" ] || return 1
}

declare -A __asn_replies __asn_descs
__asn_lookup() {
    local remote= ip= ish= REPLY= sep= asn= desc=
    remote=asn.cymru.com
    ip="${1:?missing argument}"
    ish="${ip%.*}"
    sep=' | '

    __asn_rev "$ish"
    if [ -n "${__asn_replies["$ish"]}" ]; then
        REPLY="${__asn_replies["$ish"]}"
        [ "$REPLY" != "n/a" ] || return # as if __asn_txt below had returned 1
    else
        __asn_txt "$REPLY.origin.$remote" || return
        __asn_replies["$ish"]="$REPLY"
    fi

        asns="${REPLY%%"$sep"*}" REPLY="${REPLY#"$asns$sep"}"
      subnet="${REPLY%%"$sep"*}" REPLY="${REPLY#"$subnet$sep"}"
     country="${REPLY%%"$sep"*}" REPLY="${REPLY#"$country$sep"}"
    registry="${REPLY%%"$sep"*}" REPLY="${REPLY#"$registry$sep"}"
        date="${REPLY}"

    description=
    while [ -n "$asns" ]; do
        asn="${asns%% *}" asns="${asns#"$asn"}" asns="${asns# }"
        if [ -n "${__asn_descs["$asn"]}" ]; then
            desc="${__asn_descs["$asn"]}"
        else
            __asn_txt "AS$asn.$remote" || REPLY="?" # not allowed to fail
            desc="${REPLY##* | }"
            __asn_descs["$asn"]="$desc"
        fi

        if [ -z "$description" ]; then
            description="$desc"
        elif [ "${description%"$desc"}" = "$description" ]; then
            description="$description,$desc"
        fi
    done

    printf '%-7s | %-16s | %s\n' "$asn" "$ip" "$description"
}

__asn() {
    local attempt="${2:-1}"
    __asn_lookup "$1" ||
    if [ $? = 1 ]; then
        # this code should not be here, but i need to fix this now.
        __asn_replies["${1%.*}"]="n/a"

        printf '%-7s | %-16s | %s\n' "n/a" "$1" "n/a"
    elif [ "$attempt" -lt 2 ]; then
        sleep 4 && __asn "$1" $((attempt+1))
    else
        printf '%-7s | %-16s | %s\n' "(fail)" "$1" "(failed to retrieve data, try again)"
    fi
}

asn() {
    dig -h >/dev/null 2>&1 || __asn_txt() { __asn_txt_bad "$@"; }

    echo 'AS      | IP               | AS Name'
    if [ $# = 0 ]; then
        while read -r ip; do
            __asn "$ip"
        done < <(grep -oP '(?<=^|[^\d.])((0|1\d\d|2[0-4]\d|25[0-5]|[1-9]\d?)\.((?2))\.((?2))\.((?2)))(?=$|[^\d.])')
    else
        for ip; do
            __asn "$ip"
        done
    fi
}

[ -n "${preload+-}" ] || asn "$@"
