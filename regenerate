#!/usr/bin/env dash

SELF="$0"
unset CDPATH IFS LC_ALL && export LC_ALL=C && umask 002 || exit 1

will() {
    task=$*
}

die() {
    printf 'failed to %s\n' "$task" >&2
    exit 1
}

backup() {
    if [ -e "${1}~" ]; then
        backup "${1}~" || return # die 'failed to backup file' "$1"
    fi
    mv "$1" "${1}~" || return # die 'failed to backup file' "$1"
}

has() {
    REPLY="$(command -v "$1" 2>/dev/null)"
}

if [ -h /proc/$$/exe ]; then # prefer the current shell
    eval "sh() { /proc/$$/exe \"\$@\"; }"
elif has dash; then # try dash even without Linux /proc
    eval "sh() { '$REPLY' \"\$@\"; }"
else # last resort
    : # simply run `sh` as a command and not a function
fi

will determine rc directory
self="$(readlink -f -- "$SELF")" || die

will change directory
CDPATH= cd -- "${self%/*}" || die

if ! has git; then
    will find git
    [ "$1" != commit ] || die

    # git unavailable. just document everything as it is.
    will generate documentation
    sh ./sh/document || die

    will make room for compatibility table
    printf '%s\n' '' '## compatibility table' '' >> README.md~ || die

    will generate compatibility table
    sh ./tableize >> README.md~ || die

elif [ "$1" = local ]; then
    # user requested to ignore git.
    will generate documentation
    sh ./sh/document || die

    will make room for compatibility table
    printf '%s\n' '' '## compatibility table' '' >> README.md~ || die

    will generate compatibility table
    sh ./tableize >> README.md~ || die

else
    # git available. document the most recent commit, without pending changes.
    will backup existing temp archive
    ! [ -e temp.tar.gz ] || backup temp.tar.gz || die

    will create git archive
    git archive --prefix=temp/ HEAD -o temp.tar.gz || die

    will backup existing temp directory
    ! [ -e temp ] || backup temp || die

    will unarchive temp archive
    tar -zxf temp.tar.gz || die

    will copy files
    ln temp/home/zshrc temp/.zshrc || die
    ln temp/home/shrc temp/.shrc || die
    ln temp/home/bashrc temp/.bashrc || die

    # use new documentation-generating scripts on old shell scripts.
    will copy existing readme
    cp -p README.md temp/README.md || die

    will generate documentation
    sh ./sh/document temp || die

    will make room for compatibility table
    printf '%s\n' '' '## compatibility table' '' >> temp/README.md~ || die

    will generate compatibility table
    sh ./tableize temp >> temp/README.md~ || die

    #will backup existing readme
    #[ ! -e README.md ] || backup README.md || die

    will move generated readme
    mv temp/README.md~ README.md~ || die

    will clean up temp archive
    rm temp.tar.gz || die

    will clean up temp directory
    rm -r temp || die

    if [ "$1" = commit ]; then
        will overwrite readme
        mv README.md~ README.md || die

        if ! git diff --no-patch --exit-code README.md; then
            will commit
            git commit README.md -m 'regenerate readme' || die
        else
            printf '%s\n' "nothing to do" >&2
        fi
    fi
fi
