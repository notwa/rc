#!/usr/bin/env dash

SELF="$0"

echo2() {
    local IFS=' '
    printf '%s\n' "$*" >&2
}

die() {
    echo2 "$SELF:" "$@"
    exit 1
}

backup() {
    if [ -e "${1}~" ]; then
        backup "${1}~" || die 'failed to backup file' "$1"
    fi
    mv "$1" "${1}~" || die 'failed to backup file' "$1"
}

has() {
    REPLY="$(command -v "$1" 2>/dev/null)"
}

if [ -h /proc/$$/exe ]; then # prefer the current shell
    eval "sh() { /proc/$$/exe \"\$@\"; }"
elif has dash; then # try dash even without Linux /proc
    eval "sh() { '$REPLY' \"\$@\"; }"
else # last resort
    : # simply run `sh` as a command and not a function
fi

self="$(readlink -f -- "$SELF")" || die 'failed to determine rc directory'
CDPATH= cd -- "${self%/*}" || die 'failed to change directory'

if ! command -v git >/dev/null 2>&1; then
    [ "$1" != commit ] || die 'git not found'

    # git unavailable. just document everything as it is.
    sh ./sh/document || die 'failed to generate documentation'
    printf '%s\n' '' '## compatibility table' '' >> README.md~ || die 'failed to make room for compatibility table'
    sh ./tableize >> README.md~ || die 'failed to generate compatibility table'

elif [ "$1" = local ]; then
    # user requested to ignore git.
    sh ./sh/document || die 'failed to generate documentation'
    printf '%s\n' '' '## compatibility table' '' >> README.md~ || die 'failed to make room for compatibility table'
    sh ./tableize >> README.md~ || die 'failed to generate compatibility table'

else
    # git available. document the most recent commit, without pending changes.

    [ ! -e temp.tar.gz ] || backup temp.tar.gz || die 'failed to backup existing temp archive'
    git archive --prefix=temp/ HEAD -o temp.tar.gz || die 'failed to create git archive'

    [ ! -e temp ] || backup temp || die 'failed to backup existing temp directory'
    tar -zxf temp.tar.gz || die 'failed to unarchive temp archive'

    ln temp/home/zshrc temp/.zshrc || die 'failed to copy files'
    ln temp/home/shrc temp/.shrc || die 'failed to copy files'
    ln temp/home/bashrc temp/.bashrc || die 'failed to copy files'

    # use new documentation-generating scripts on old shell scripts.
    cp -p README.md temp/README.md || die 'failed to copy existing readme'
    sh ./sh/document temp || die 'failed to generate documentation'
    printf '%s\n' '' '## compatibility table' '' >> temp/README.md~ || die 'failed to make room for compatibility table'
    sh ./tableize temp >> temp/README.md~ || die 'failed to generate compatibility table'

    #[ ! -e README.md ] || backup README.md || die 'failed to backup existing readme'
    mv temp/README.md~ README.md~ || die 'failed to move generated readme'

    rm temp.tar.gz || die 'failed to clean up temp archive'
    rm -r temp || die 'failed to clean up temp directory'

    if [ "$1" = commit ]; then
        mv README.md~ README.md || die 'failed to overwrite readme'
        if ! git diff --no-patch --exit-code README.md; then
            git commit README.md -m 'regenerate readme' || die 'failed to commit'
        else
            echo2 'nothing to do'
        fi
    fi
fi
